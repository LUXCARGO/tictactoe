<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Кибер-Крестики</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
      font-family: 'Orbitron', sans-serif;
      color: #00ffe5;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }

    h1 {
      font-size: 3em;
      text-shadow: 0 0 20px #00ffe5;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 15px;
      margin-top: 30px;
    }

    .cell {
      width: 100px;
      height: 100px;
      font-size: 2.5em;
      color: #00ffe5;
      border: 2px solid #00ffe5;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: 0 0 10px #00ffe5;
      transition: 0.2s ease;
    }

    .cell:hover {
      background-color: rgba(0, 255, 229, 0.1);
      box-shadow: 0 0 20px #00ffe5;
    }

    .winner {
      margin-top: 20px;
      font-size: 1.5em;
      color: #ff00c8;
      text-shadow: 0 0 10px #ff00c8;
    }

    .controls {
      margin-top: 20px;
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      justify-content: center;
    }

    button {
      padding: 10px 20px;
      font-size: 1em;
      background-color: transparent;
      color: #00ffe5;
      border: 2px solid #00ffe5;
      cursor: pointer;
      box-shadow: 0 0 10px #00ffe5;
    }

    button:hover {
      background-color: rgba(0, 255, 229, 0.2);
    }

    .glow {
      animation: neonGlow 1s infinite alternate;
    }

    @keyframes neonGlow {
      from {
        box-shadow: 0 0 10px #ff00c8;
      }
      to {
        box-shadow: 0 0 25px #ff00c8;
      }
    }
  </style>
</head>
<body>
  <h1>Кибер-Крестики</h1>
  <div class="board" id="board"></div>
  <div class="winner" id="winner"></div>
  <div class="controls">
    <button onclick="resetGame()">Сыграть ещё</button>
    <button onclick="toggleMode()">Режим: <span id="modeText">2 Игрока</span></button>
  </div>

  <audio id="clickSound" src="https://cdn.pixabay.com/download/audio/2022/03/15/audio_0d8e6112b7.mp3" preload="auto"></audio>
  <audio id="winSound" src="https://cdn.pixabay.com/download/audio/2022/02/23/audio_279f6d96c1.mp3" preload="auto"></audio>

  <script>
    const board = document.getElementById('board');
    const winnerDisplay = document.getElementById('winner');
    const clickSound = document.getElementById('clickSound');
    const winSound = document.getElementById('winSound');
    const modeText = document.getElementById('modeText');

    let cells = Array(9).fill(null);
    let currentPlayer = 'X';
    let gameOver = false;
    let vsBot = false;

    function createBoard() {
      board.innerHTML = '';
      cells.forEach((cell, index) => {
        const div = document.createElement('div');
        div.classList.add('cell');
        div.dataset.index = index;
        div.textContent = cell || '';
        div.addEventListener('click', handleClick);
        board.appendChild(div);
      });
    }

    function handleClick(e) {
      const index = e.target.dataset.index;
      if (cells[index] || gameOver) return;

      makeMove(index, currentPlayer);

      if (vsBot && !gameOver && currentPlayer === 'O') {
        setTimeout(botMove, 400);
      }
    }

    function makeMove(index, player) {
      if (cells[index] || gameOver) return;
      cells[index] = player;
      clickSound.play();
      updateBoard();
      if (checkWin(player)) {
        winnerDisplay.textContent = `Игрок ${player} победил!`;
        highlightWin();
        winSound.play();
        gameOver = true;
        return;
      }

      if (!cells.includes(null)) {
        winnerDisplay.textContent = 'Ничья!';
        gameOver = true;
        return;
      }

      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    }

    function botMove() {
      const empty = cells.map((val, i) => val === null ? i : null).filter(v => v !== null);
      if (empty.length === 0) return;
      const choice = empty[Math.floor(Math.random() * empty.length)];
      makeMove(choice, currentPlayer);
    }

    function checkWin(player) {
      const winCombos = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6],
      ];
      return winCombos.some(combo => {
        const [a, b, c] = combo;
        return cells[a] === player && cells[b] === player && cells[c] === player;
      });
    }

    function highlightWin() {
      const winCombos = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6],
      ];
      winCombos.forEach(combo => {
        const [a, b, c] = combo;
        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {
          [a, b, c].forEach(i => board.children[i].classList.add('glow'));
        }
      });
    }

    function toggleMode() {
      vsBot = !vsBot;
      modeText.textContent = vsBot ? 'Против Бота' : '2 Игрока';
      resetGame();
    }

    function resetGame() {
      cells = Array(9).fill(null);
      currentPlayer = 'X';
      gameOver = false;
      winnerDisplay.textContent = '';
      createBoard();
    }

    createBoard();
  </script>
</body>
</html>
